# Minimum CMake version requirement
cmake_minimum_required(VERSION 3.14)

# Project name, version and language
project(conduit-cpp VERSION 1.0.0 DESCRIPTION "Modern C++ HTTP client library" LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Add compiler warnings
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# Define library source files
set(LIBRARY_SOURCES
    src/conduit.cpp
    src/json_parser.cpp
    # src/conduit_c_compat.cpp  # Disabled temporarily due to API changes
)

# Define public headers
set(PUBLIC_HEADERS
    include/conduit.hpp
    # include/conduit_c_compat.h  # Disabled temporarily due to API changes
)

# Create library target
add_library(conduit-cpp ${LIBRARY_SOURCES})

# Set target properties
set_target_properties(conduit-cpp PROPERTIES
    VERSION ${PROJECT_VERSION}
    SOVERSION ${PROJECT_VERSION_MAJOR}
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED ON
)

# Include directories
target_include_directories(conduit-cpp 
    PUBLIC 
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:include>
    PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/src
)

# Link libraries (networking)
target_link_libraries(conduit-cpp PRIVATE)

# Create example executables
add_executable(simple_example_cpp examples/simple_example.cpp)
target_link_libraries(simple_example_cpp PRIVATE conduit-cpp)

add_executable(json_example_cpp examples/json_example.cpp)
target_link_libraries(json_example_cpp PRIVATE conduit-cpp)

# Installation rules
install(TARGETS conduit-cpp
    EXPORT conduit-cpp-targets
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
    INCLUDES DESTINATION include
)

# Install public headers
install(FILES ${PUBLIC_HEADERS} DESTINATION include/conduit)

# Generate and install package configuration files
include(CMakePackageConfigHelpers)

# Generate the config file that includes the exports
configure_package_config_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/conduit-cpp-config.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/conduit-cpp-config.cmake
    INSTALL_DESTINATION lib/cmake/conduit-cpp
)

# Generate the version file for the config file
write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/conduit-cpp-config-version.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
)

# Install the configuration files
install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/conduit-cpp-config.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/conduit-cpp-config-version.cmake
    DESTINATION lib/cmake/conduit-cpp
)

# Install the export set for use with the install-tree
install(EXPORT conduit-cpp-targets
    FILE conduit-cpp-targets.cmake
    NAMESPACE ConduitCpp::
    DESTINATION lib/cmake/conduit-cpp
)

# Configure and install pkg-config file
configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/conduit-cpp.pc.in
    ${CMAKE_CURRENT_BINARY_DIR}/conduit-cpp.pc
    @ONLY
)

install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/conduit-cpp.pc
    DESTINATION lib/pkgconfig
)

# Enable testing
enable_testing()

# Add basic tests
add_executable(test_basic tests/test_basic.cpp)
target_link_libraries(test_basic PRIVATE conduit-cpp)
add_test(NAME BasicTests COMMAND test_basic)

# Add tests if they exist
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/tests)
    add_subdirectory(tests)
endif()
